#include <SPI.h>

const unsigned STCP = 3;
const unsigned N_ROW = 8;
const unsigned rows[] = {4, 5, 6, 7, 8, 9, 10, 11};

const unsigned N_ALPHA = 26;
const byte alpha[26][8] = {
    {B00110000,B01111000,B11001100,B11001100,B11111100,B11001100,B11001100,B00000000},
    {B11111100,B01100110,B01100110,B01111100,B01100110,B01100110,B11111100,B00000000},
    {B00111100,B01100110,B11000000,B11000000,B11000000,B01100110,B00111100,B00000000},
    {B11111000,B01101100,B01100110,B01100110,B01100110,B01101100,B11111000,B00000000},
    {B11111110,B01100010,B01101000,B01111000,B01101000,B01100010,B11111110,B00000000},
    {B11111110,B01100010,B01101000,B01111000,B01101000,B01100000,B11110000,B00000000},
    {B00111100,B01100110,B11000000,B11000000,B11001110,B01100110,B00111110,B00000000},
    {B11001100,B11001100,B11001100,B11111100,B11001100,B11001100,B11001100,B00000000},
    {B01111000,B00110000,B00110000,B00110000,B00110000,B00110000,B01111000,B00000000},
    {B00011110,B00001100,B00001100,B00001100,B11001100,B11001100,B01111000,B00000000},
    {B11110110,B01100110,B01101100,B01111000,B01101100,B01100110,B11110110,B00000000},
    {B11110000,B01100000,B01100000,B01100000,B01100010,B01100110,B11111110,B00000000},
    {B11000110,B11101110,B11111110,B11111110,B11010110,B11000110,B11000110,B00000000},
    {B11000110,B11100110,B11110110,B11011110,B11001110,B11000110,B11000110,B00000000},
    {B00111000,B01101100,B11000110,B11000110,B11000110,B01101100,B00111000,B00000000},
    {B11111100,B01100110,B01100110,B01111100,B01100000,B01100000,B11110000,B00000000},
    {B01111000,B11001100,B11001100,B11001100,B11011100,B01111000,B00011100,B00000000},
    {B11111100,B01100110,B01100110,B01111100,B01101100,B01100110,B11110110,B00000000},
    {B01111000,B11001100,B11100000,B01110000,B00011100,B11001100,B01111000,B00000000},
    {B11111100,B10110100,B00110000,B00110000,B00110000,B00110000,B01111000,B00000000},
    {B11001100,B11001100,B11001100,B11001100,B11001100,B11001100,B11111100,B00000000},
    {B11001100,B11001100,B11001100,B11001100,B11001100,B01111000,B00110000,B00000000},
    {B11000110,B11000110,B11000110,B11010110,B11111110,B11101110,B11000110,B00000000},
    {B11000110,B11000110,B01101100,B00111000,B00111000,B01101100,B11000110,B00000000},
    {B11001100,B11001100,B11001100,B01111000,B00110000,B00110000,B01111000,B00000000},
    {B11111110,B11000110,B10001100,B00011000,B00110010,B01100110,B11111110,B00000000}
};

int cnt=0;

byte shift(byte data, int n){
    return (n>0) ? data<<n : data>>abs(n);
}

void setup(){

    SPI.begin();
    SPI.setBitOrder(LSBFIRST);

    pinMode(STCP, OUTPUT);

    for(int i=0;i<N_ROW;i++){
        pinMode(rows[i], OUTPUT);
        digitalWrite(rows[i], LOW);
    }
}

void loop(){
    for(int i=-8;i<=8;i++){
        for(int j=0;j<N_ROW;j++){
            digitalWrite(rows[j],HIGH);
            digitalWrite(STCP, LOW);
            SPI.transfer(~shift(alpha[cnt][j], i));
            digitalWrite(STCP, HIGH);
            delay(10);
            digitalWrite(rows[j],LOW);
        }
    }
    cnt=(cnt+1)%N_ALPHA;
}